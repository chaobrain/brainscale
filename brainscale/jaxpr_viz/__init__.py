# Copyright 2024 BDP Ecosystem Limited. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

from . import graph

import typing

import jax
import pydot


def draw(f, collapse_primitives=True, show_avals=True) -> typing.Callable:
    """
    Visualise a JAX computation graph

    Wraps a JAX jit compiled function, which when called
    visualises the computation graph using
    pydot.

    Examples
    --------

    .. highlight:: python
    .. code-block:: python

       import jax
       import jpviz

       @jax.jit
       def foo(x):
           return 2 * x

       @jax.jit
       def bar(x):
           x = foo(x)
           return x - 1

       g = jpviz.draw(bar)(jax.numpy.arange(10))

    Parameters
    ----------
    f:
        JAX jit compiled function
    collapse_primitives: bool
        If `True` sub-functions that contain only JAX primitives
        will be collapsed into a single node in the generated
        graph
    show_avals: bool
        If `True` then type information will be
        included on node labels

    Returns
    -------
    Wrapped function that when called with concrete
    values generated the corresponding visualisation
    of the computation graph
    """

    def _inner_draw(*args, **kwargs) -> pydot.Graph:
        jaxpr = jax.make_jaxpr(f)(*args, **kwargs)
        return draw_dot_graph(jaxpr, collapse_primitives, show_avals)

    return _inner_draw


def view_pydot(dot_graph: pydot.Dot) -> None:
    """
    Show a pydot graph in a jupyter notebook

    Parameters
    ----------
    dot_graph: Graph
        Pydot graph as generated by `draw`
    """
    from IPython.display import Image, display

    plt = Image(dot_graph.create_png())
    display(plt)


def draw_dot_graph(
    fn: jax.core.ClosedJaxpr, collapse_primitives: bool, show_avals: bool
) -> pydot.Graph:
    """
    Generate a pydot representation of an XLA graph

    Parameters
    ----------
    fn : ClosedJaxpr
    collapse_primitives: bool
        If `True` functions that are composed of only primitive
        values will be collapsed
    show_avals: bool
        If `True` type information will be included in the node label

    Returns
    -------
    Graph
        Pydot graph
    """

    g = pydot.Dot(graph_type="digraph")

    sub_graph, _, _, _, _ = graph.get_sub_graph(
        fn.eqns[0], "", 0, collapse_primitives, show_avals
    )
    if isinstance(sub_graph, pydot.Subgraph):
        g.add_subgraph(sub_graph)
    else:
        g.add_node(sub_graph)

    return g

